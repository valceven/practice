#include <iostream>
#include <cstdlib>
#include "node.h"

using namespace std;

class BSTree {
    node* root;
    int size;

    node* create_node(int num, node* parent) {
        node* n = new node;
        n->element = num;
        n->parent = parent;
        n->right = NULL;
        n->left = NULL;
        return n;
    }

    bool search(node* curr, int num) {
        if (curr == NULL) {
            return false;
        }
        if (num == curr->element) {
            return true;
        }
        if (num < curr->element) {
            return search(curr->left, num);
        }
        return search(curr->right, num);
    }

    node* search_node(node* curr, int num) {
        if (num == curr->element) {
            return curr;
        }
        if (num < curr->element) {
            if (curr->left != NULL) {
                return search_node(curr->left, num);
            }
            return curr;
        }
        if (curr->right != NULL) {
            return search_node(curr->right, num);
        }
        return curr;
    }

public:
    BSTree() {
        root = NULL;
        size = 0;
    }

    bool search(int num) {
        return search(root, num);
    }

    bool insert(int num) {
        if (root == NULL) {
            root = create_node(num, NULL);
            size++;
            return true;
        } else {
            node* parent = search_node(root, num);
            if (parent->element != num) {
                node* newest = create_node(num, parent);
                if (parent->element < num) {
                    parent->right = newest;
                } else {
                    parent->left = newest;
                }
                size++;
                return true;
            }
        }
        return false;
    }

    bool remove(int num) {
        if (isEmpty()) {
            return false;
        }
        node* rem_node = search_node(root, num);
        if (rem_node->element != num) {
            return false;
        }

        int children = 0;
        if (rem_node->right) {
            children = 1;
        }
        if (rem_node->left) {
            if (children == 1) {
                children = 2;
            } else {
                children = -1;
            }
        }

        if (children == 0) {
            node* parent = rem_node->parent;
            if (!parent) {
                root = NULL;
            } else {
                if (rem_node == parent->left) {
                    parent->left = NULL;
                } else {
                    parent->right = NULL;
                }
            }

            delete rem_node;
            size--;
        } else if (children == -1 || children == 1) {
            node* parent = rem_node->parent;
            node* child = (children == -1) ? rem_node->left : rem_node->right;

            child->parent = parent;
            if (!parent) {
                root = child;
            } else {
                if (parent->left == rem_node) {
                    parent->left = child;
                } else {
                    parent->right = child;
                }
            }

            delete rem_node;
            size--;
        } else {
            node* right_st = rem_node->right;
            while (right_st->left != NULL) {
                right_st = right_st->left;
            }

            int temp = right_st->element;
            remove(temp);
            rem_node->element = temp;
        }
        return true;
    }

    void zigleft(node* curr) {
        node* x = curr;
        node* y = x->parent;

        if (y != root) {
            node* z = y->parent;
            if (z->left == y) {
                z->left = x;
            } else {
                z->right = x;
            }
            x->parent = z;
        } else {
            root = x;
            x->parent = NULL;
        }

        if (x->left != NULL) {
            y->right = x->left;
            x->left->parent = y;
        } else {
            y->right = NULL;
        }

        x->left = y;
        y->parent = x;
    }

    void zigright(node* curr) {
        node* x = curr;
        node* y = x->parent;

        if (y != root) {
            node* z = y->parent;
            if (z->right == y) {
                z->right = x;
            } else {
                z->left = x;
            }
            x->parent = z;
        } else {
            root = x;
            x->parent = NULL;
        }

        if (x->right != NULL) {
            y->left = x->right;
            x->right->parent = y;
        } else {
            y->left = NULL;
        }

        x->right = y;
        y->parent = x;
    }

    void restructure(node* child) {
        while (child->parent != NULL) {
            node* parent = child->parent;
            node* grandparent = parent->parent;

            if (grandparent == NULL) {
                if (parent->left == child) {
                    zigright(child);
                    cout << "ZIGRIGHT" << endl;
                } else {
                    zigleft(child);
                    cout << "ZIGLEFT" << endl;
                }
            } else {
                bool gtop_right = (grandparent->right == parent);
                bool ptoc_right = (parent->right == child);

                if (gtop_right && ptoc_right) {
                    zigleft(parent);
                    zigleft(child);
                    cout << "ZIGZIGLEFT" << endl;
                } else if (gtop_right && !ptoc_right) {
                    zigright(child);
                    zigleft(child);
                    cout << "ZIGZAGLEFT" << endl;
                } else if (!gtop_right && !ptoc_right) {
                    zigright(parent);
                    zigright(child);
                    cout << "ZIGZIGRIGHT" << endl;
                } else {
                    zigleft(child);
                    zigright(child);
                    cout << "ZIGZAGRIGHT" << endl;
                }
            }
        }
    }

    void print() {
        if (isEmpty()) {
            cout << "EMPTY" << endl;
            return;
        }
        cout << "PRE-ORDER: ";
        print_preorder(root);
        cout << endl << "IN-ORDER: ";
        print_inorder(root);
        cout << endl << "POST-ORDER: ";
        print_postorder(root);
        cout << endl << "STATUS: " << check_health(root, NULL) << endl;
    }

    bool isEmpty() {
        return size == 0;
    }

    void print_preorder(node* curr) {
        cout << curr->element << " ";
        if (curr->left != NULL) {
            print_preorder(curr->left);
        }
        if (curr->right != NULL) {
            print_preorder(curr->right);
        }
    }

    void print_inorder(node* curr) {
        if (curr->left != NULL) {
            print_inorder(curr->left);
        }
        cout << curr->element << " ";
        if (curr->right != NULL) {
            print_inorder(curr->right);
        }
    }

    void print_postorder(node* curr) {
        if (curr->left != NULL) {
            print_postorder(curr->left);
        }
        if (curr->right != NULL) {
            print_postorder(curr->right);
        }
        cout << curr->element << " ";
    }

    bool check_health(node* curr, node* parent) {
        bool health = curr->parent == parent;
        if (curr->left != NULL) {
            health &= check_health(curr->left, curr);
        }
        if (curr->right != NULL) {
            health &= check_health(curr->right, curr);
        }
        return health;
    }
};
